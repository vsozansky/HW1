Принципы SOLID в Java
SOLID — это акроним, образованный из заглавных букв первых пяти принципов ООП и проектирования. 


1. Single Responsibility Principle (Принцип единственной ответственности).
2. Open Closed Principle (Принцип открытости/закрытости).
3. Liskov’s Substitution Principle (Принцип подстановки Барбары Лисков).
4. Interface Segregation Principle (Принцип разделения интерфейса).
5. Dependency Inversion Principle (Принцип инверсии зависимостей).


1. Принцип единственной ответственности (SRP)
Данный принцип гласит: никогда не должно быть больше одной причины изменить класс. 

В коде этот принцип продемонстрирован тем, что создаем очень маленькие объекты, которые выполняют одну единственную роль.

Так объект класса DocumentProcessor позволяет работать с документом.
но он ничего не знает о имплементации самого документа.

Объект класса ProcessorLogger это обертка над DocumentProcessor и имеет цель логирования определенных действий.

Также объекты классов GatewaysLayer и PresentersLayer выполняют строго свои роли.

Таким образом если придется вносить изменения в работу объекта, то изменения коснутся только конкретного объекта.



2. Принцип открытости/закрытости (OCP)
Этот принцип емко описывают так: программные сущности (классы, модули, функции и т.п.) должны быть открыты для расширения, но закрыты для изменения.

В коде этот принцип продемонстрирован тем, что создаем объект обертку, которые инкапсулирует в себя расширяемый объект, и добавляем в него новую функциональность.



3. Принцип подстановки Барбары Лисков (LSP)
Это вариация принципа открытости/закрытости, о котором говорилось ранее. Его можно описать так: объекты в программе можно заменить их наследниками без изменения свойств программы.

В коде этот принцип продемонстрирован тем, что создаем объект наследник, которые инкапсулирует в себя расширяемый объект, и добавляем в него новую функциональность.
(public class ProcessorLogger2 extends ProcessorLogger implements Processor)



4. Принцип разделения интерфейса (ISP)
Характеризуется следующим утверждением: клиенты не должны быть вынуждены реализовывать методы, которые они не будут использовать.

В коде этот принцип продемонстрирован тем, что вся логика приложения разбита на минимальные сущности, треборания к которым зафиксированы в контрактах - интерфейсах. И в дальнейшем имплементация приложения осуществляется на уровне интерфейсов.



5. Принцип инверсии зависимостей (DIP)
Этот принцип SOLID в Java описывают так: зависимости внутри системы строятся на основе абстракций. Модули верхнего уровня не зависят от модулей нижнего уровня. Абстракции не должны зависеть от деталей. Детали должны зависеть от абстракций.

В коде этот принцип продемонстрирован тем, при создании главного объекта мы передаем ему имплементацию тех объектов с которыми он будет в дальнейшем работать.
В примере идет передача напрямую - влоб. Обычно такое делается с помощью контейнеров IoC и DI.

